from pydantic import BaseModel, Field, model_validator
from typing import Optional, Dict, Any

class BaseSchema(BaseModel):
    """Base model for all schemas to include versioning."""
    # Add model_config to address Pydantic v2 warning about 'model_' namespace
    model_config: Dict[str, Any] = {'protected_namespaces': ()}

    schema_version: str = Field(default="1.0.0", description="Semantic version of the schema.")


class Metadata(BaseModel):
    """Optional metadata for various schema components."""
    # Also add model_config here for safety, though BaseSchema might cover it
    model_config: Dict[str, Any] = {'protected_namespaces': ()}

    model: Optional[str] = Field(None, description="LLM model used for generation.")
    tokens_used: Optional[int] = Field(None, description="Tokens consumed for the operation.")
    timestamp: Optional[str] = Field(None, description="Timestamp of the event (ISO 8601 format).")
    reasoning_tree: Optional[dict] = Field(None, description="Reasoning tree structure generated by the agent, if applicable.")
    guardrails_triggered: Optional[list[str]] = Field(default_factory=list, description="List of guardrail IDs triggered.")
    # Add other common metadata fields as needed
